"use strict";
const layout_main: Function = () => {
  const rendering: Function = (): void => {
    type HTMLAttribute = {
      name: string;
      value: string;
    };
    const htmlAttributes: Function = (
      elem: HTMLElement,
      attributes: HTMLAttribute[]
    ): void => {
      attributes.forEach((attribute: HTMLAttribute) => {
        elem.setAttribute(attribute.name, attribute.value);
      });
    };
    const InfinityHeader: Function = () => {
      const hm: { open: string; close: string } = {
        open: "/layout/image/hamburger/open.svg",
        close: "/layout/image/hamburger/close.svg",
      };
      const result: HTMLElement = document.createElement("header");
      result.className = "The-Infinitys-Header";
      {
        // set Home button
        const home_label: HTMLElement = document.createElement("a");
        htmlAttributes(home_label, [
          {
            name: "href",
            value: "/",
          },
          {
            name: "aria-label",
            value: "Home",
          },
        ]);
        const infinity_logo: HTMLElement = document.createElement("img");
        infinity_logo.className = "logo";
        const The_Infinitys_logo_src: string = "/image/The-Infinitys.webp";
        htmlAttributes(infinity_logo, [
          {
            name: "src",
            value: The_Infinitys_logo_src,
          },
          {
            name: "alt",
            value: "",
          },
        ]);
        home_label.append(infinity_logo);
        result.append(home_label);
      }
      // add txt
      {
        const The_Infinitys_txt: Function = (): HTMLElement => {
          const inf_txt: HTMLElement = document.createElement("div");
          const inf_spirit: string = `
          <svg
            version="1.1"
            xmlns="http://www.w3.org/2000/svg"
            xmlns:xlink="http://www.w3.org/1999/xlink"
            class="The-Infinitys-txt"
            viewBox="12,0,137.86168,20.65713">
            <g transform="translate(-170.69416,-169.67143)">
              <g stroke-miterlimit="10">
                <g>
                  <path
                    d="M203.14867,186.29997h-1.39285v-16.3714l1.39285,-0.25714v5.87142c0.45714,-0.17143 0.92142,-0.30358 1.39285,-0.39643c0.47143,-0.09285 0.94286,-0.13928 1.41429,-0.13928c0.30211,-0.00112 0.60402,0.01598 0.90407,0.05121c0.30728,0.03728 0.59064,0.095 0.85007,0.17314c0.13202,0.03952 0.26179,0.08623 0.38871,0.13993c0.57143,0.24286 1.02857,0.58929 1.37142,1.03929c0.34285,0.45 0.58214,0.98928 0.71786,1.61785c0.07876,0.37003 0.13373,0.74472 0.16457,1.12178c0.02646,0.31824 0.03948,0.63745 0.039,0.95679v6.19284h-1.39286v-5.74284c0.0005,-0.27773 -0.007,-0.55541 -0.0225,-0.83272c-0.02515,-0.43414 -0.07121,-0.82085 -0.13821,-1.16014c-0.04007,-0.20776 -0.09551,-0.41224 -0.16586,-0.61178c-0.09814,-0.27414 -0.22143,-0.51306 -0.36985,-0.71678c-0.25,-0.34285 -0.58214,-0.58929 -0.99642,-0.73928c-0.41429,-0.15 -0.93572,-0.225 -1.56429,-0.225c-0.15078,0.00034 -0.30145,0.00793 -0.4515,0.02272c-0.11059,0.01074 -0.22084,0.0246 -0.33064,0.04157c-0.27857,0.04285 -0.53929,0.08929 -0.78215,0.13929c-0.24286,0.05 -0.46071,0.10357 -0.65357,0.16071c-0.03902,0.01158 -0.07794,0.02344 -0.11678,0.03557c-0.10457,0.03257 -0.18129,0.05928 -0.23014,0.08014c-0.00948,0.00401 -0.01884,0.0083 -0.02808,0.01286zM285.36996,175.22142h1.47857c0.15715,0.68571 0.35714,1.425 0.6,2.21786c0.24286,0.79285 0.51786,1.61071 0.825,2.45356c0.30714,0.84285 0.64643,1.70713 1.01785,2.59285c0.37142,0.88572 0.77143,1.75714 1.2,2.61428c0.18901,-0.53175 0.37152,-1.06579 0.54749,-1.602c0.09859,-0.30091 0.19467,-0.60262 0.28822,-0.90514c0.24286,-0.78571 0.46786,-1.56786 0.675,-2.34643c0.20714,-0.77857 0.40714,-1.575 0.6,-2.38928c0.19286,-0.81428 0.39643,-1.69286 0.61071,-2.63571h1.39285c-0.45714,2.07142 -0.97857,4.08571 -1.56428,6.04285c-0.58571,1.95714 -1.22143,3.75 -1.90714,5.37857c-0.11254,0.26754 -0.23273,0.53178 -0.36043,0.79242c-0.15614,0.31772 -0.31457,0.60715 -0.47528,0.86829c-0.14166,0.23203 -0.30045,0.45315 -0.47507,0.6615c-0.14621,0.17424 -0.30623,0.3364 -0.4785,0.48492c-0.35375,0.30119 -0.76584,0.52617 -1.21049,0.66086c-0.00364,0.00115 -0.00729,0.0023 -0.01093,0.00343c-0.418,0.12857 -0.90264,0.19929 -1.45392,0.21215c-0.06178,0.00143 -0.12357,0.00214 -0.18536,0.00214c-0.1864,0.00065 -0.37259,-0.01216 -0.55714,-0.03836c-0.14123,-0.02026 -0.28085,-0.05041 -0.41786,-0.09022c-0.05111,-0.0149 -0.10211,-0.03019 -0.153,-0.04586c-0.15715,-0.04857 -0.271,-0.08878 -0.34157,-0.12064c-0.01777,-0.00779 -0.03509,-0.01659 -0.05186,-0.02636l0.27857,-1.15714c0.01616,0.01155 0.03329,0.02166 0.05122,0.03021c0.06014,0.02986 0.15657,0.066 0.28929,0.10843c0.04706,0.01497 0.09428,0.02948 0.14164,0.0435c0.26428,0.07857 0.53929,0.11786 0.825,0.11786c0.4,0 0.76071,-0.04286 1.08214,-0.12857c0.32143,-0.08571 0.61071,-0.23215 0.86785,-0.43928c0.16297,-0.13254 0.31125,-0.28218 0.44229,-0.44636c0.09156,-0.11406 0.1764,-0.23333 0.25414,-0.35721c0.161,-0.25543 0.31986,-0.56264 0.47657,-0.92164c0.04638,-0.10637 0.09109,-0.21346 0.13414,-0.32121c-0.47143,-0.87142 -0.92499,-1.77857 -1.36071,-2.72143c-0.43572,-0.94286 -0.84286,-1.89642 -1.22143,-2.8607c-0.37857,-0.96429 -0.725,-1.92857 -1.03929,-2.89285c-0.28749,-0.87917 -0.54464,-1.76799 -0.77099,-2.66485c-0.01457,-0.05811 -0.029,-0.11626 -0.04329,-0.17443zM235.89147,186.29997v-10.69284c0.39543,-0.109 0.92093,-0.23108 1.5765,-0.36622c0.03163,-0.00653 0.06328,-0.01303 0.09493,-0.0195c0.53429,-0.109 1.16006,-0.17643 1.87735,-0.20228c0.23127,-0.00815 0.46267,-0.01216 0.69407,-0.012c0.29726,-0.0011 0.59432,0.01599 0.8895,0.05121c0.30286,0.03743 0.58229,0.09521 0.83828,0.17336c0.13011,0.03952 0.25795,0.08617 0.38293,0.13972c0.3204,0.13516 0.61855,0.31793 0.88436,0.54214c0.1733,0.14779 0.32949,0.31456 0.46564,0.49715c0.23451,0.31775 0.4202,0.66877 0.55093,1.04142c0.06717,0.18862 0.12291,0.38111 0.16692,0.57643c0.08288,0.36962 0.1408,0.74439 0.17336,1.12178c0.02781,0.31817 0.04147,0.63741 0.04093,0.95679v6.19284h-1.39285v-5.74284c0.0005,-0.27773 -0.00701,-0.55541 -0.0225,-0.83272c-0.02515,-0.43414 -0.07121,-0.82085 -0.13821,-1.16014c-0.04007,-0.20776 -0.0955,-0.41224 -0.16586,-0.61178c-0.09814,-0.27414 -0.22143,-0.51306 -0.36986,-0.71678c-0.25,-0.34285 -0.57857,-0.58929 -0.98571,-0.73928c-0.40714,-0.15 -0.91785,-0.225 -1.53214,-0.225c-0.23394,-0.00029 -0.46786,0.00471 -0.70157,0.015c-0.36885,0.01686 -0.70285,0.04757 -1.00199,0.09214c-0.09679,0.01438 -0.19344,0.02967 -0.28993,0.04586c-0.31657,0.05343 -0.53064,0.10242 -0.64221,0.147v9.72855zM261.22,186.29997v-10.69284c0.39543,-0.109 0.92093,-0.23108 1.5765,-0.36622c0.03163,-0.00653 0.06327,-0.01303 0.09492,-0.0195c0.53429,-0.109 1.16007,-0.17643 1.87736,-0.20228c0.23127,-0.00815 0.46266,-0.01216 0.69407,-0.012c0.29726,-0.0011 0.59433,0.01599 0.8895,0.05121c0.30286,0.03743 0.58228,0.09521 0.83828,0.17336c0.13011,0.03952 0.25795,0.08617 0.38293,0.13972c0.3204,0.13516 0.61855,0.31793 0.88436,0.54214c0.1733,0.14779 0.32949,0.31456 0.46564,0.49715c0.23451,0.31775 0.42019,0.66877 0.55093,1.04142c0.06717,0.18862 0.12291,0.38111 0.16693,0.57643c0.08288,0.36962 0.14079,0.74439 0.17336,1.12178c0.02781,0.31817 0.04147,0.63741 0.04093,0.95679v6.19284h-1.39285v-5.74284c0.0005,-0.27773 -0.00701,-0.55541 -0.0225,-0.83272c-0.02515,-0.43414 -0.07121,-0.82085 -0.13822,-1.16014c-0.04007,-0.20776 -0.0955,-0.41224 -0.16585,-0.61178c-0.09814,-0.27414 -0.22143,-0.51306 -0.36986,-0.71678c-0.25,-0.34285 -0.57857,-0.58929 -0.98571,-0.73928c-0.40714,-0.15 -0.91786,-0.225 -1.53214,-0.225c-0.23394,-0.00029 -0.46785,0.00471 -0.70157,0.015c-0.36885,0.01686 -0.70285,0.04757 -1.002,0.09214c-0.09679,0.01438 -0.19343,0.02967 -0.28992,0.04586c-0.31657,0.05343 -0.53065,0.10242 -0.64222,0.147v9.72855zM254.36287,170.05715l-0.27857,1.2c-0.05244,-0.02353 -0.10577,-0.04504 -0.15986,-0.0645c-0.10857,-0.03957 -0.23886,-0.08022 -0.39085,-0.12193c-0.04846,-0.01327 -0.09704,-0.02612 -0.14572,-0.03857c-0.30714,-0.07857 -0.69642,-0.11785 -1.16785,-0.11785c-0.25447,-0.00164 -0.50864,0.01793 -0.75986,0.0585c-0.59686,0.10071 -1.04714,0.33122 -1.35085,0.6915c-0.16805,0.2052 -0.29849,0.43851 -0.38529,0.68914c-0.16457,0.45314 -0.24685,1.02343 -0.24685,1.71086v1.15714h4.45713v1.17857h-4.45713v9.89998h-1.39285v-12.27855c-0.00239,-0.40827 0.02856,-0.81605 0.09257,-1.21928c0.07029,-0.426 0.18079,-0.80879 0.3315,-1.14836c0.14147,-0.32547 0.33476,-0.62588 0.57236,-0.8895c0.35969,-0.38667 0.81255,-0.67463 1.31528,-0.83635c0.502,-0.171 1.08857,-0.2565 1.75971,-0.2565c0.41543,0 0.77778,0.02228 1.08707,0.06685c0.12802,0.01795 0.25511,0.04213 0.38079,0.07243c0.07677,0.01873 0.15327,0.03852 0.2295,0.05936c0.21714,0.05971 0.37372,0.11451 0.46972,0.16436c0.01365,0.00704 0.02702,0.01461 0.04007,0.02272zM188.55584,171.45h10.97141v1.26428h-4.75714v13.58569h-1.45714v-13.58569h-4.75714zM307.99849,175.49999l-0.32143,1.24286c-0.17143,-0.08571 -0.46072,-0.2 -0.86786,-0.34285c-0.36757,-0.129 -0.88942,-0.19972 -1.56557,-0.21215c-0.07457,-0.0014 -0.14914,-0.00212 -0.22371,-0.00214c-0.21762,-0.00059 -0.43495,0.0161 -0.64993,0.04993c-0.08029,0.01278 -0.16012,0.02828 -0.23936,0.0465c-0.15857,0.03593 -0.31335,0.08695 -0.46221,0.15236c-0.09585,0.04235 -0.18846,0.0917 -0.27707,0.14764c-0.21429,0.13572 -0.38571,0.30714 -0.51428,0.51428c-0.07821,0.12805 -0.13266,0.26917 -0.16072,0.41657c-0.02203,0.11338 -0.03279,0.22865 -0.03214,0.34415c-0.00068,0.12273 0.01008,0.24526 0.03214,0.366c0.02551,0.14144 0.07249,0.27817 0.13929,0.40543c0.08553,0.15837 0.19684,0.3014 0.32936,0.42321c0.05532,0.05144 0.11348,0.09973 0.17421,0.14465c0.20486,0.152 0.45258,0.29485 0.74315,0.42857c0.02364,0.01087 0.04736,0.02158 0.07114,0.03214c0.16037,0.07124 0.32124,0.14138 0.48257,0.21043c0.19385,0.083 0.40085,0.17 0.62099,0.261c0.36437,0.14547 0.7258,0.29821 1.08407,0.45814c0.04942,0.02213 0.09878,0.04442 0.14807,0.06686c0.26015,0.11716 0.50928,0.25736 0.74443,0.41893c0.10158,0.07021 0.19996,0.14493 0.29486,0.22393c0.3,0.25 0.54285,0.55 0.72857,0.9c0.18572,0.35 0.27857,0.78928 0.27857,1.31785c0.00378,0.33021 -0.04417,0.65897 -0.14208,0.97436c-0.17055,0.53159 -0.51727,0.98912 -0.98292,1.29708c-0.35716,0.23969 -0.75074,0.42001 -1.1655,0.534c-0.345,0.099 -0.72299,0.167 -1.13399,0.204c-0.25787,0.02276 -0.51663,0.03391 -0.7755,0.03343c-0.26837,0.00058 -0.5367,-0.00664 -0.80464,-0.02164c-0.50272,-0.02943 -0.92271,-0.0885 -1.26,-0.17721c-0.05505,-0.01444 -0.10971,-0.0303 -0.16393,-0.04757c-0.11142,-0.03552 -0.22256,-0.07188 -0.33343,-0.10907c-0.33215,-0.11172 -0.56385,-0.20036 -0.69514,-0.26593l0.36428,-1.26428c0.01152,0.00758 0.02331,0.01472 0.03536,0.02142c0.05057,0.02843 0.13165,0.06772 0.24322,0.11786c0.04901,0.02193 0.09852,0.04272 0.1485,0.06236c0.11971,0.04728 0.26307,0.09793 0.43007,0.15193c0.24286,0.07857 0.53214,0.14643 0.86785,0.20357c0.15625,0.02621 0.31353,0.0458 0.47143,0.05872c0.21515,0.018 0.44729,0.027 0.69643,0.027c0.27865,0.0012 0.55704,-0.01706 0.83314,-0.05464c0.28743,-0.04043 0.55121,-0.10336 0.79135,-0.18878c0.12234,-0.04338 0.24179,-0.09448 0.35765,-0.153c0.44329,-0.22472 0.69814,-0.58107 0.76457,-1.06907c0.01195,-0.08958 0.01781,-0.17985 0.01757,-0.27022c0,-0.3 -0.04643,-0.55714 -0.13928,-0.77142c-0.06318,-0.14347 -0.1501,-0.27525 -0.25714,-0.38979c-0.06297,-0.06801 -0.13102,-0.13112 -0.20358,-0.18878c-0.09398,-0.07442 -0.19245,-0.14298 -0.29486,-0.20529c-0.09985,-0.06157 -0.20914,-0.12207 -0.32785,-0.1815c-0.07381,-0.03695 -0.14839,-0.07231 -0.22371,-0.10607c-0.14239,-0.06383 -0.28518,-0.12676 -0.42836,-0.18878c-0.12871,-0.05586 -0.26536,-0.11443 -0.40993,-0.17571c-0.15251,-0.06471 -0.30522,-0.12892 -0.45814,-0.19264c-0.30129,-0.12444 -0.59999,-0.25504 -0.89593,-0.39171c-0.09454,-0.04373 -0.18876,-0.08817 -0.28264,-0.13329c-0.24028,-0.1146 -0.4712,-0.24786 -0.69064,-0.39857c-0.10147,-0.07007 -0.19992,-0.14443 -0.29507,-0.22286c-0.28571,-0.23572 -0.51429,-0.51785 -0.68572,-0.84643c-0.17143,-0.32857 -0.25714,-0.72857 -0.25714,-1.2c-0.00477,-0.38277 0.06624,-0.76271 0.20893,-1.11793c0.17622,-0.41791 0.45433,-0.78501 0.80892,-1.06779c0.36885,-0.29705 0.79501,-0.5148 1.25185,-0.63964c0.33443,-0.096 0.70093,-0.15672 1.0995,-0.18214c0.14817,-0.00938 0.2966,-0.01403 0.44507,-0.01393c0.545,0 1.0215,0.03329 1.4295,0.09986c0.14986,0.02407 0.29852,0.0551 0.4455,0.093c0.37157,0.097 0.65993,0.18578 0.86507,0.26635c0.05916,0.02294 0.11729,0.04847 0.17422,0.0765zM279.79854,171.70714v3.51428h4.41427v1.17857h-4.41427v5.89284c-0.00041,0.2023 0.00595,0.40456 0.01907,0.60643c0.01286,0.19085 0.03222,0.36743 0.05807,0.52971c0.02072,0.1334 0.04862,0.2656 0.08357,0.396c0.03553,0.13255 0.08014,0.2625 0.1335,0.38893c0.09,0.21057 0.19906,0.3845 0.32721,0.52179c0.2,0.21429 0.44286,0.35714 0.72857,0.42857c0.18203,0.04485 0.36732,0.07523 0.55415,0.09086c0.12928,0.01105 0.25897,0.01648 0.38871,0.01628c0.1841,0.00055 0.36815,-0.00709 0.55157,-0.02292c0.169,-0.01514 0.32536,-0.03779 0.46907,-0.06793c0.13396,-0.02724 0.26556,-0.06494 0.39364,-0.11272c0.10461,-0.03962 0.20855,-0.08098 0.31178,-0.12407c0.19772,-0.08285 0.36307,-0.16129 0.49607,-0.23529c0.00932,-0.00516 0.0186,-0.01038 0.02786,-0.01565l0.34285,1.15715c-0.06169,0.03895 -0.12551,0.07443 -0.19115,0.10629c-0.20542,0.10143 -0.49171,0.21242 -0.85886,0.33299c-0.5,0.16429 -1.04285,0.24643 -1.62856,0.24643c-0.24208,0.00078 -0.48403,-0.01181 -0.72472,-0.03771c-0.24714,-0.02743 -0.47572,-0.06993 -0.68572,-0.1275c-0.1065,-0.02896 -0.21148,-0.06321 -0.31457,-0.10264c-0.26695,-0.10027 -0.51588,-0.24312 -0.73714,-0.423c-0.14031,-0.11553 -0.26685,-0.24683 -0.37714,-0.39129c-0.16891,-0.22372 -0.30527,-0.47024 -0.405,-0.73221c-0.07844,-0.20413 -0.14008,-0.41432 -0.18429,-0.62849c-0.11428,-0.54285 -0.17142,-1.18571 -0.17142,-1.92857v-10.19999zM222.5415,181.04998h-7.77856c0.01058,0.41003 0.05546,0.81846 0.13415,1.221c0.08843,0.43843 0.21922,0.83142 0.39236,1.17899c0.12912,0.262 0.29059,0.50676 0.48064,0.72857c0.3408,0.38687 0.77875,0.67568 1.26857,0.83657c0.32157,0.11214 0.68064,0.1875 1.07721,0.22607c0.21745,0.02062 0.43578,0.03071 0.65421,0.03021c0.22146,0.00047 0.44287,-0.00654 0.66386,-0.021c0.43786,-0.02957 0.80635,-0.09078 1.1055,-0.18364c0.01023,-0.00315 0.02045,-0.00638 0.03064,-0.00965c0.1035,-0.03328 0.20665,-0.06764 0.30943,-0.10307c0.28657,-0.09914 0.50486,-0.18622 0.65485,-0.26122l0.25714,1.2c-0.2,0.11428 -0.575,0.24999 -1.125,0.40714c-0.55,0.15715 -1.19643,0.23572 -1.93928,0.23572c-0.37224,0.00146 -0.74415,-0.02218 -1.11321,-0.07072c-0.50786,-0.06885 -0.96535,-0.18814 -1.37249,-0.35786c-0.41083,-0.16814 -0.79579,-0.39359 -1.14343,-0.66964c-0.19902,-0.15956 -0.38293,-0.3371 -0.54942,-0.53036c-0.39213,-0.45918 -0.69131,-0.99015 -0.88093,-1.56343c-0.03008,-0.08884 -0.05787,-0.17844 -0.08335,-0.26871c-0.2,-0.70714 -0.3,-1.48215 -0.3,-2.325c0,-0.90314 0.12036,-1.69821 0.36107,-2.38521c0.01812,-0.05165 0.03705,-0.10301 0.05678,-0.15407c0.13816,-0.36271 0.30961,-0.71183 0.51214,-1.04292c0.16825,-0.27413 0.36273,-0.53126 0.58071,-0.76779c0.35586,-0.3895 0.77943,-0.71121 1.25014,-0.9495c0.09582,-0.04798 0.19347,-0.09222 0.29272,-0.13264c0.57857,-0.23572 1.175,-0.35357 1.78928,-0.35357c0.49313,-0.00477 0.9843,0.06288 1.45778,0.20079c0.68873,0.20396 1.30771,0.59425 1.78864,1.12778c0.35683,0.40123 0.6308,0.86905 0.80614,1.37657c0.14957,0.41343 0.25772,0.87614 0.32443,1.38814c0.05528,0.44052 0.08205,0.88416 0.08015,1.32814c0,0.11428 -0.00357,0.22857 -0.01072,0.34285c-0.00423,0.06877 -0.0101,0.13744 -0.01758,0.20593c-0.00424,0.03857 -0.0091,0.07708 -0.01457,0.1155zM230.66291,186.29997v-14.84997h1.45714v14.84997zM257.53429,175.22142v11.07855h-1.39285v-11.07855zM274.80569,175.22142v11.07855h-1.39285v-11.07855zM214.8058,179.87141h6.34285c-0.00675,-0.35431 -0.04237,-0.70747 -0.1065,-1.05599c-0.12628,-0.664 -0.36221,-1.212 -0.70779,-1.644c-0.41391,-0.5202 -1.01738,-0.85485 -1.67786,-0.93043c-0.1683,-0.02303 -0.33799,-0.03434 -0.50786,-0.03385c-0.25296,-0.00145 -0.5052,0.02696 -0.75149,0.08464c-0.20373,0.04836 -0.40104,0.12064 -0.58779,0.21535c-0.39285,0.2 -0.73572,0.46786 -1.02857,0.80358c-0.2859,0.33006 -0.51141,0.7079 -0.66621,1.11621c-0.00662,0.01717 -0.01311,0.03438 -0.0195,0.05164c-0.16429,0.44286 -0.26072,0.90714 -0.28929,1.39285zM296.89851,170.01429h1.54285v0.81428c0,0.71429 -0.03929,1.43928 -0.11786,2.175c-0.07857,0.73572 -0.18214,1.46785 -0.31071,2.19642h-0.70714c-0.11428,-0.72857 -0.21071,-1.46071 -0.28929,-2.19642c-0.07857,-0.73572 -0.11786,-1.46785 -0.11786,-2.19642zM257.81437,172.21628c0.02843,-0.11029 0.04233,-0.22382 0.04135,-0.33771c0.00036,-0.08297 -0.00674,-0.1658 -0.02121,-0.2475c-0.0331,-0.20353 -0.13085,-0.391 -0.27878,-0.53465c-0.2,-0.19286 -0.44286,-0.28928 -0.72857,-0.28928c-0.28571,0 -0.52857,0.09642 -0.72857,0.28928c-0.12576,0.12129 -0.21531,0.27517 -0.25865,0.44443c-0.02843,0.11029 -0.04233,0.22382 -0.04135,0.33772c-0.00036,0.08297 0.00674,0.1658 0.02121,0.2475c0.0331,0.20353 0.13085,0.391 0.27878,0.53465c0.2,0.19286 0.44286,0.28929 0.72857,0.28929c0.28571,0 0.52857,-0.09643 0.72857,-0.28929c0.12576,-0.12129 0.21531,-0.27517 0.25865,-0.44443zM275.08576,172.21628c0.02843,-0.11029 0.04234,-0.22382 0.04136,-0.33771c0.00036,-0.08297 -0.00674,-0.1658 -0.02121,-0.2475c-0.0331,-0.20353 -0.13085,-0.391 -0.27879,-0.53465c-0.2,-0.19286 -0.44286,-0.28928 -0.72857,-0.28928c-0.28571,0 -0.52857,0.09642 -0.72857,0.28928c-0.12576,0.12129 -0.21531,0.27517 -0.25865,0.44443c-0.02843,0.11029 -0.04234,0.22382 -0.04136,0.33772c-0.00036,0.08297 0.00674,0.1658 0.02121,0.2475c0.0331,0.20353 0.13085,0.391 0.27879,0.53465c0.2,0.19286 0.44286,0.28929 0.72857,0.28929c0.28571,0 0.52857,-0.09643 0.72857,-0.28929c0.12576,-0.12129 0.21531,-0.27517 0.25864,-0.44443z"
                    fill="var(--text-color)" fill-rule="evenodd" stroke="none" stroke-width="0" stroke-linecap="round" />
                </g>
              </g>
            </g>
          </svg>
          `;
          inf_txt.innerHTML = inf_spirit;
          return inf_txt;
        };
        result.append(The_Infinitys_txt());
      }
      {
        {
          // add hamburger menu button
          const hamburger_input = document.createElement("input");
          // set attributes
          hamburger_input.id = "hamburger-button";
          htmlAttributes(hamburger_input, [
            {
              name: "type",
              value: "checkbox",
            },
            {
              name: "aria-label",
              value: "hamburger menu button",
            },
          ]);
          result.append(hamburger_input);
        }
        {
          // add hamburgermenu button img
          const hm_label = document.createElement("label");
          // set attributes
          hm_label.id = "hamburger-label";
          htmlAttributes(hm_label, [
            {
              name: "for",
              value: "hamburger-button",
            },
          ]);
          {
            const img: { open: HTMLImageElement; close: HTMLImageElement } = {
              open: document.createElement("img"),
              close: document.createElement("img"),
            };
            img.open.className = "logo open";
            img.open.src = hm.open;
            img.open.alt = "";
            img.close.className = "logo close";
            img.close.src = hm.close;
            img.close.alt = "";
            hm_label.append(img.open);
            hm_label.append(img.close);
          }
          result.append(hm_label);
        }
        {
          const HamburgerMenu: Function = () => {
            const hm_menu: HTMLElement = document.createElement("div");
            const color_theme_div: HTMLDivElement =
              document.createElement("div");
            color_theme_div.id = "change-color-theme";
            color_theme_div.innerHTML = `
            <svg
                viewBox="0 0 300 100"
                version="1.1"
                xmlns="http://www.w3.org/2000/svg"
                xmlns:xlink="http://www.w3.org/1999/xlink"
              >
              <circle id="color-theme-change-selected" data-inertia="0" cx="250" cy="50" r="45" />
              <g name="light">
                <circle style="fill:color-mix(in srgb, transparent 99%, var(--back-color));stroke:none;" cx="50" cy="50" r="45" />
                <circle cx="50" cy="50" r="20" style="fill: var(--text-color); stroke: none" />
                  <path
                    d="
                    M50,25v-20
                    M50,75v20
                    M25,50h-20
                    M75,50h20
                    M67,67l14,14
                    M33,67l-14,14
                    M67,33l14,-14
                    M33,33l-14,-14
                    "
                    style="stroke: var(--text-color); stroke-width: 4; fill: none;stroke-linecap:round;"
                    />
              </g>
              <g name="dark">
                <circle style="fill:color-mix(in srgb, transparent 99%, var(--back-color));stroke:none;" cx="150" cy="50" r="45" />
                <path
                  d="
                  M160,10
                  A40,40,0,1,0,190,65
                  A35,35,0,1,1,160,10
                  z
                  "
                  style="stroke: none; fill: var(--text-color)"
                  />
              </g>
              <g name="auto">
                <circle style="fill:color-mix(in srgb, transparent 99%, var(--back-color));stroke:none;" cx="250" cy="50" r="45" />
                <path
                  d="
                  M250,30
                  A20,20,0,1,0,267,57
                  A15,15,0,1,1,250,30
                  z
                  "
                  style="stroke: none; fill: var(--text-color)"
                  />
                <path
                  d="
                  M250,25v-20
                  M250,75v20
                  M225,50h-20
                  M275,50h20
                  M267,67l14,14
                  M233,67l-14,14
                  M267,33l14,-14
                  M233,33l-14,-14
                  "
                  style="stroke: var(--text-color); stroke-width: 4; fill: none;stroke-linecap:round;"
                  />
              </g>
            </svg>
            `;
            hm_menu.append(color_theme_div);
            const hamburger_icons: {
              X: string;
              article: string;
              // scratch: string;
              github: string;
              pixiv: string;
            } = {
              X: "/layout/image/hamburger/menu/x.svg",
              article: "/layout/image/hamburger/menu/article.svg",
              // scratch: "/layout/image/hamburger/menu/scratch.svg",
              github: "/layout/image/hamburger/menu/github.svg",
              pixiv: "/layout/image/hamburger/menu/pixiv.svg",
            };
            hm_menu.className = "Hamburger-Menu";
            type LinkMenu = {
              name: string;
              href: string;
              target: string;
              src: string;
            };
            const menus: LinkMenu[] = [
              {
                name: "Article",
                href: "/article/",
                target: "self",
                src: hamburger_icons.article,
              },
              // {
              //   name: "Scratch",
              //   href: "/Scratch/",
              //   target: "self",
              //   src: hamburger_icons.scratch,
              // },
              // [Removed By ST]
              {
                name: "GitHub",
                href: "https://github.com/The-Infinitys/",
                target: "blank",
                src: hamburger_icons.github,
              },
              {
                name: "X",
                href: "https://x.com/The_Infinity_s/",
                target: "blank",
                src: hamburger_icons.X,
              },
              {
                name: "Pixiv",
                href: "https://www.pixiv.net/users/109461187",
                target: "blank",
                src: hamburger_icons.pixiv,
              },
            ];
            menus.forEach((menu: LinkMenu) => {
              const link_menu: HTMLElement = document.createElement("div");
              {
                const link_menu_a: HTMLElement = document.createElement("a");
                htmlAttributes(link_menu_a, [
                  { name: "href", value: menu.href },
                  { name: "target", value: "_" + menu.target },
                ]);
                const link_menu_img: HTMLImageElement =
                  document.createElement("img");
                htmlAttributes(link_menu_img, [
                  { name: "alt", value: "" },
                  { name: "class", value: "icon" },
                  { name: "src", value: menu.src },
                ]);
                const link_menu_txt: HTMLElement = document.createElement("p");
                link_menu_txt.innerHTML = menu.name;
                link_menu_a.append(link_menu_img, link_menu_txt);
                link_menu.append(link_menu_a);
              }
              hm_menu.append(link_menu);
            });
            return hm_menu;
          };
          result.append(HamburgerMenu());
        }
      }
      return result;
    };
    const InfinityFooter: Function = () => {
      const result: HTMLElement = document.createElement("footer");
      result.className = "The-Infinitys-Footer";
      const content: string = `
      <div>
      <div>
        <p><a href="/contact/">Contact to The Infinity's</a></p>
        <p><a href="/article/">Watch The Infinity's Articles</a></p>
        <p><a href="https://x.com/The_Infinity_s/">X(Twitter)</a></p>
        <p><a href="https://github.com/The_Infinitys/">GitHub profile</a></p>
      </div>
      </div>
      <h1>&copy; 2024 The Infinity's</h1>`;
      result.innerHTML = content;
      return result;
    };
    document.body.prepend(InfinityHeader());
    document.body.append(InfinityFooter());
    const generate_background: Function = (): HTMLDivElement => {
      const monochrome_dark: string =
        "/layout/image/background/monochrome/dark.svg";
      const monochrome_light: string =
        "/layout/image/background/monochrome/light.svg";
      const monochrome_center: string =
        "/layout/image/background/monochrome/center.svg";
      const wallpaper_infinite_url: string =
        "/wallpaper/content/Infinite/?embed";
      const gradient_bg: string = "/layout/image/background/gradient/bg.jpeg";
      const result: HTMLDivElement = document.createElement("div");
      result.id = "BackGround";
      result.className = "background";
      result.innerHTML = `
      <div data-background-name="monochrome">
        <img
          alt=""
          class="background fill dark translucent"
          src="${monochrome_dark}"
        />
        <img
          alt=""
          class="background fill light translucent"
          src="${monochrome_light}"
        />
        <img
          alt=""
          class="background center translucent"
          src="${monochrome_center}"
        />
      </div>
      <div data-background-name="gradient">
        <img
          alt=""
          class="background over translucent"
          src="${gradient_bg}"
        />
      </div>
      <div data-background-name="fluffycat">
        <img
          alt=""
          class="background over translucent"
          src="${gradient_bg}"
        />
      </div>
      <div data-background-name="wallpaper-infinite">
        <iframe
          class="background fill"
          style="border:none;"
          src="${wallpaper_infinite_url}"
        />
      </div>
      <div data-background-name="rainbow">
        <canvas class="background fill rainbow"></canvas>
      </div>
      <div data-background-name="raindrop"></div>
      <div data-background-name="space">
        <svg
          class="background right bottom"
          version="1.1"
          xmlns="http://www.w3.org/2000/svg"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          viewBox="0,0,232.49988,175.69679"
        >
          <g transform="translate(-134.20845,-81.80321)">
            <g fill="none" stroke="var(--text-color)" stroke-miterlimit="10">
              <g>
                <path
                  d="M150.91667,128.91667c0,0 2.78818,-3.37904 4.36612,-4.69398c1.40097,-1.16747 4.63388,-2.80602 4.63388,-2.80602"
                  stroke-width="2"
                  stroke-linecap="round"
                />
                <path
                  d="M140.91667,125.16667c0,0 4.80054,-3.82067 7.35228,-5.55116c2.24118,-1.51988 7.14772,-4.28217 7.14772,-4.28217"
                  stroke-width="2"
                  stroke-linecap="round"
                />
                <path
                  d="M178.70556,111.36111c0,0 1.3593,2.72892 2.21583,2.63184c0.80009,-0.09068 2.76561,-3.19639 2.76561,-3.19639c0,0 2.23148,1.334 3.08826,1.04103c0.64234,-0.21965 1.59696,-2.64315 1.59696,-2.64315"
                  stroke-width="2"
                  stroke-linecap="round"
                />
                <path
                  d="M178.38889,107.31178c0,-0.23932 0.194,-0.43333 0.43333,-0.43333c0.23933,0 0.43333,0.19401 0.43333,0.43333c0,0.23932 -0.19401,0.43333 -0.43333,0.43333c-0.23933,0 -0.43333,-0.19401 -0.43333,-0.43333z"
                  stroke-width="1"
                  stroke-linecap="butt"
                />
                <path
                  d="M170.86258,108.3703c0,-0.58461 0.4739,-1.05851 1.05851,-1.05851c0.58461,0 1.05853,0.4739 1.05853,1.05851c0,0.58461 -0.47392,1.05852 -1.05853,1.05852c-0.58461,0 -1.05851,-0.47391 -1.05851,-1.05852z"
                  stroke-width="2.5"
                  stroke-linecap="butt"
                />
                <path
                  d="M187.75731,103.42293c0,-0.58461 0.4739,-1.05851 1.05851,-1.05851c0.58461,0 1.05853,0.4739 1.05853,1.05851c0,0.58461 -0.47392,1.05852 -1.05853,1.05852c-0.58461,0 -1.05851,-0.47391 -1.05851,-1.05852z"
                  stroke-width="2.5"
                  stroke-linecap="butt"
                />
                <path
                  d="M210.88306,103.42293l9.66666,-2.44444"
                  stroke-width="2"
                  stroke-linecap="round"
                />
                <path
                  d="M205.88306,99.91432c0,0 5.60091,-4.41211 8.13852,-5.4911c2.07036,-0.88031 6.97259,-1.3978 6.97259,-1.3978"
                  stroke-width="2"
                  stroke-linecap="round"
                />
                <path
                  d="M188.21639,88.91432c0,0 4.59654,-7.02674 6.88889,-7.11111c2.12013,-0.33334 7.11111,7.11111 7.11111,7.11111"
                  stroke-width="2"
                  stroke-linecap="round"
                />
                <path
                  d="M156.43861,108.35877c0,0 -1.76019,-10.10635 -0.44445,-11.77778c1.38789,-1.7631 8,1 8,1"
                  stroke-width="2"
                  stroke-linecap="round"
                />
                <path
                  d="M152.49417,117.16667c0,0 12.17129,-24.05139 28.34132,-27.71699c16.17003,-3.6656 33.00532,2.49861 35.54321,13.23493c1.37457,5.81503 0.12174,13.70304 -1.40133,19.94545c-0.68665,2.81428 -4.7306,12.80565 -9.58261,21.59052c-2.20801,3.99774 -9.81763,16.03612 -18.7349,26.48726c-4.9409,5.79079 -15.38094,18.3261 -25.16554,26.94119c-13.50869,11.89406 -26.28585,19.42243 -26.28585,19.42243"
                  stroke-width="2"
                  stroke-linecap="round"
                />
                <path
                  d="M254.125,132.875c0,0 -28.49189,13.82897 -42.28684,19.33841c-8.43972,3.37066 -23.42002,9.66368 -32.43939,12.12895c-2.43792,0.66636 -4.78124,0.61234 -5.80515,-0.70231c-0.84246,-1.08166 1.54904,-3.34242 6.00308,-2.30667c3.53967,0.82312 7.49769,3.01014 10.50575,4.93905c1.42757,0.91542 13.61995,13.06562 25.48978,23.25388c5.12354,4.39769 16.68372,15.57531 29.94492,21.50949c7.82627,3.50213 24.48878,9.29462 41.31372,10.93063c9.43315,0.91725 27.7166,2.0149 44.3049,-0.23372c18.30879,-2.48184 34.55256,-8.3855 34.55256,-8.3855"
                  stroke-width="2"
                  stroke-linecap="round"
                />
                <path
                  d="M234.51924,178.43651c-1.34589,3.72923 -9.06097,13.55973 -12.28571,11.42857c-3.20396,-1.07899 -0.6198,-14.49572 6.85715,-19.00001c3.44437,-1.90355 6.77445,3.84221 5.42857,7.57143z"
                  stroke-width="2"
                  stroke-linecap="round"
                />
                <path
                  d="M272.16667,128.16667c0,0 -10.0965,21.07218 -15.39423,31.8012c-7.28233,14.74826 -24.27244,48.53214 -24.27244,48.53214"
                  stroke-width="2"
                  stroke-linecap="round"
                />
                <path
                  d="M266.16667,174c0,0 -6.86435,3.18265 -10.08224,4.84035c-3.96024,2.04012 -10.58442,8.65965 -10.58442,8.65965c0,0 4.42893,4.84091 7.31876,6.08699c3.14424,1.35577 10.84791,1.74635 10.84791,1.74635"
                  stroke-width="2"
                  stroke-linecap="round"
                />
                <path
                  d="M270.83333,183.16667c0,0 -5.96766,8.39482 -2.5,12.16667c3.46766,3.77185 12.68626,0.06855 13,-5c0.72884,-11.7749 -9.5,-4.66667 -9.5,-4.66667"
                  stroke-width="2"
                  stroke-linecap="round"
                />
                <path
                  d="M290.5,179.66667l-4.83333,18.66667c0,0 7.35133,-16.79607 11.5,-16.66667c2.83416,0.0884 -1.32423,18.11109 -0.16667,18.16667c2.42032,0.11622 7.74014,-13.45794 16.16667,-17.58334c4.09479,-2.00469 5.5,9.91666 5.5,9.91666l3.33333,-3"
                  stroke-width="2"
                  stroke-linecap="round"
                />
                <path
                  d="M329.16667,179.16667c0,0 -20.08509,23.63383 -30.82782,40.24926c-10.74273,16.61542 -19.17218,37.08408 -19.17218,37.08408"
                  stroke-width="2"
                  stroke-linecap="round"
                />
                <path
                  d="M333.9,184.9c0,0 -7.31862,0.82032 -8.47012,4.35422c-1.1515,3.53391 -1.73984,11.70728 3.47012,10.24578c5.20995,-1.4615 9.2,-13.8 9.2,-13.8c0,0 -3.40539,8.50157 -2.6,14c0.20608,1.40697 5.4,-2.2 5.4,-2.2"
                  stroke-width="2"
                  stroke-linecap="round"
                />
                <path
                  d="M346.59172,185.6077l-3.07693,20.15384c0,0 3.53993,-10.27143 5.73373,-13.56213c1.92474,-2.8871 5.66039,-9.15552 7.80473,-6.05326c1.26734,1.83348 1.70797,8.26551 2.89979,12.05149c1.16811,3.71066 3.10021,4.79467 3.10021,4.79467"
                  stroke-width="2"
                  stroke-linecap="round"
                />
                <path
                  d="M316.97742,153.78309c0.55482,1.32442 -1.34918,3.38412 -4.25272,4.60047c-2.90354,1.21635 -5.7071,1.12874 -6.26193,-0.19568c-0.55482,-1.32442 1.34918,-3.38412 4.25272,-4.60047c2.90354,-1.21635 5.7071,-1.12874 6.26193,0.19568z"
                  stroke-width="6"
                  stroke-linecap="butt"
                />
                <path
                  d="M340.60723,161.00963c2.30189,0.9643 3.81136,2.59721 3.3715,3.6472c-0.43986,1.04998 -2.66248,1.11944 -4.96437,0.15514c-2.30189,-0.9643 -3.81137,-2.59721 -3.37151,-3.6472c0.43986,-1.04998 2.66249,-1.11944 4.96438,-0.15514z"
                  stroke-width="6"
                  stroke-linecap="butt"
                />
                <path
                  d="M301.39091,147.67273c0,0.71797 -0.67158,1.3 -1.5,1.3c-0.82842,0 -1.5,-0.58203 -1.5,-1.3c0,-0.71797 0.67158,-1.3 1.5,-1.3c0.82842,0 1.5,0.58203 1.5,1.3z"
                  stroke-width="3"
                  stroke-linecap="butt"
                />
                <path
                  d="M310.3,141.4c0,0.71797 -0.67158,1.3 -1.5,1.3c-0.82842,0 -1.5,-0.58203 -1.5,-1.3c0,-0.71797 0.67158,-1.3 1.5,-1.3c0.82842,0 1.5,0.58203 1.5,1.3z"
                  stroke-width="3"
                  stroke-linecap="butt"
                />
                <path
                  d="M321.48182,141.4c0,0.71797 -0.67158,1.3 -1.5,1.3c-0.82842,0 -1.5,-0.58203 -1.5,-1.3c0,-0.71797 0.67158,-1.3 1.5,-1.3c0.82842,0 1.5,0.58203 1.5,1.3z"
                  stroke-width="3"
                  stroke-linecap="butt"
                />
                <path
                  d="M336.84546,151.42949c0,0.71797 -0.67158,1.3 -1.5,1.3c-0.82842,0 -1.5,-0.58203 -1.5,-1.3c0,-0.71797 0.67158,-1.3 1.5,-1.3c0.82842,0 1.5,0.58203 1.5,1.3z"
                  stroke-width="3"
                  stroke-linecap="butt"
                />
                <path
                  d="M347.39091,154.02949c0,0.71797 -0.67158,1.3 -1.5,1.3c-0.82842,0 -1.5,-0.58203 -1.5,-1.3c0,-0.71797 0.67158,-1.3 1.5,-1.3c0.82842,0 1.5,0.58203 1.5,1.3z"
                  stroke-width="3"
                  stroke-linecap="butt"
                />
                <path
                  d="M354.78403,161.0921c0,0.71797 -0.67158,1.3 -1.5,1.3c-0.82842,0 -1.5,-0.58203 -1.5,-1.3c0,-0.71797 0.67158,-1.3 1.5,-1.3c0.82842,0 1.5,0.58203 1.5,1.3z"
                  stroke-width="3"
                  stroke-linecap="butt"
                />
              </g>
            </g>
          </g>
        </svg>
      </div>
      `;
      return result;
    };
    document.body.append(generate_background());
    const generate_mousestalker: Function = (): HTMLElement => {
      const result: HTMLElement = document.createElement("div");
      result.id = "mouse-stalker";
      result.innerHTML = `<img src="/image/The-Infinitys.webp" />`;
      let msPos = {
        s: {
          x: document.documentElement.clientWidth / 2,
          y: document.documentElement.clientHeight / 2,
        },
        m: {
          x: document.documentElement.clientWidth / 2,
          y: document.documentElement.clientHeight / 2,
        },
      };
      document.addEventListener("mousemove", (e) => {
        msPos.m.x = e.clientX;
        msPos.m.y = e.clientY;
      });
      function ms_animation() {
        msPos.s.x += (msPos.m.x - msPos.s.x) * 0.1;
        msPos.s.y += (msPos.m.y - msPos.s.y) * 0.1;
        const x = Math.round(msPos.s.x * 10) / 10;
        const y = Math.round(msPos.s.y * 10) / 10;
        result.style.top = y.toString() + "px";
        result.style.left = x.toString() + "px";
        result.style.opacity = Math.max(
          0,
          Math.min(Math.sqrt((msPos.m.x - x) ** 2 + (msPos.m.y - y) ** 2), 1) /
            4
        ).toString();
        requestAnimationFrame(ms_animation);
      }
      requestAnimationFrame(ms_animation);
      return result;
    };
    // document.body.append(generate_mousestalker());
    // 2024-12-19から無効化
  };
  rendering();
  const client: Function = (): void => {
    const select_bg: Function = () => {
      const bg_parent: HTMLElement | null =
        document.querySelector("#BackGround");
      if (bg_parent == null) {
        return 1;
      }
      type bg_pattern = {
        width: number;
        height: number;
        shift: number[];
        func: Function;
      };
      const bg_func: {
        monochrome: Function;
        gradient: Function;
        raindrop: Function;
        fluffycat: Function;
        space: Function;
        wallpaper: {
          infinite: Function;
        };
        rainbow: {
          run: Function;
          rectangle: Function;
          ichimatsu: Function;
          gingham_check: Function;
          triangle: Function;
          honeycomb: Function;
          halloween: Function;
          wave: Function;
        };
      } = {
        space: (): number => {
          const space: HTMLElement | null = document.querySelector(
            '#BackGround>div[data-background-name="space"]'
          );
          if (space == null) {
            return 1;
          } else {
            space.style.display = "contents";
          }
          const asteroid_count: number = 20;
          const asteroid_dispersion: number = asteroid_count / 10;
          const generate: Function = () => {
            const asteroid: HTMLElement = document.createElement("div");
            asteroid.className = "light three-d";
            asteroid.addEventListener("animationiteration", () => {
              asteroid.setAttribute(
                "style",
                `
                --x-pos: ${(
                  asteroid_dispersion *
                  (2 * Math.random() - 1)
                ).toString()};
                --y-pos: ${(
                  asteroid_dispersion *
                  (2 * Math.random() - 1)
                ).toString()};
                background: radial-gradient(
                  hsl(${Math.random().toString()}turn, 100%, 50%),
                  transparent
                );
                `
              );
            });
            space?.append(asteroid);
          };
          for (let i = 0; i < asteroid_count; i++) {
            setTimeout(() => {
              generate();
            }, (i * 2000) / asteroid_count);
          }
          return 0;
        },
        monochrome: (): number => {
          const monochrome: HTMLElement | null = document.querySelector(
            '#BackGround>div[data-background-name="monochrome"]'
          );
          if (monochrome == null) {
            return 1;
          } else {
            monochrome.style.display = "contents";
            return 0;
          }
        },
        gradient: (): number => {
          const gradient: HTMLElement | null = document.querySelector(
            '#BackGround>div[data-background-name="gradient"]'
          );
          if (gradient == null) {
            return 1;
          } else {
            gradient.style.display = "contents";
            return 0;
          }
        },
        raindrop: (): number => {
          const raindrop: HTMLElement | null = document.querySelector(
            '#BackGround>div[data-background-name="raindrop"]'
          );
          if (raindrop == null) {
            return 1;
          }
          raindrop.style.display = "contents";
          const drop: Function = (): void => {
            const wave: HTMLElement = document.createElement("div");
            wave.innerHTML = `
              <svg
                viewBox="0 0 100 100"
                version="1.1"
                xmlns="http://www.w3.org/2000/svg"
                xmlns:xlink="http://www.w3.org/1999/xlink"
              >
                <defs>
                  <style>
                    .drop{
                      fill:var(--color);
                      stroke:none;
                      fill-opacity: 0;
                    }
                    .wave{
                      fill:none;
                      stroke:var(--color);
                      stroke-width: 0;
                    }
                  </style>
                </defs>
                <g>
                  <circle cx="50" cy="50" r="40" class="drop">
                    <animate
                      attributeType="XML"
                      attributeName="r"
                      calcMode="spline"
                      values="40; 0; 0"
                      keyTimes="0.0; 0.5; 1.0"
                      keySplines="0.5 0 0.5 1; 0.5 0 0.5 1"
                      dur="2s"
                      repeatCount="1"
                    />
                    <animate
                      attributeType="XML"
                      attributeName="fill-opacity"
                      calcMode="spline"
                      values="0; 1; 0"
                      keyTimes="0.0; 0.5; 1.0"
                      keySplines="0.5 0 0.5 1; 0.5 0 0.5 1"
                      dur="2s"
                      repeatCount="1"
                    />
                  </circle>
                  <circle cx="50" cy="50" r="40" class="wave">
                    <animate
                      attributeType="XML"
                      attributeName="r"
                      calcMode="spline"
                      values="0; 0; 40"
                      keyTimes="0.0; 0.5; 1.0"
                      keySplines="0 0.5 0.5 1;0 0.5 0.5 1"
                      dur="2s"
                      repeatCount="1"
                    />
                    <animate
                      attributeType="XML"
                      attributeName="stroke-width"
                      calcMode="spline"
                      values="0; 5; 0"
                      keyTimes="0.0; 0.5; 1.0"
                      keySplines="0 0.5 0.5 1;0 0.5 0.5 1"
                      dur="2s"
                      repeatCount="1"
                    />
                  </circle>
                </g>
              </svg>
            `;
            wave.children[0].setAttribute(
              "style",
              `
              position:fixed;
              top:${(100 * Math.random()).toString()}vh;
              left:${(100 * Math.random()).toString()}vw;
              --size:
                ${(20 * (1 - 0.9 * Math.random())).toString()}
                vmin;
              width:var(--size);
              height:var(--size);
              z-index:-1000;
              transform:translate(-50%,-50%);
              --color:
                ${"hsl(" + Math.random().toString()}turn 100% 50%);
              `
            );
            raindrop.append(wave);
            setTimeout(() => {
              wave.remove();
              drop();
            }, 1950);
          };
          for (let i = 0; i < 5; ++i) {
            drop();
          }
          return 0;
        },
        fluffycat: (): number => {
          const fluffycat: HTMLElement | null = document.querySelector(
            '#BackGround>div[data-background-name="fluffycat"]'
          );
          if (fluffycat == null) {
            return 1;
          } else {
            fluffycat.style.display = "contents";
            return 0;
          }
        },
        wallpaper: {
          infinite: (): number => {
            const wallpaper_infinite: HTMLElement | null =
              document.querySelector(
                '#BackGround>div[data-background-name="wallpaper-infinite"]'
              );
            if (wallpaper_infinite == null) {
              return 1;
            } else {
              wallpaper_infinite.style.display = "contents";
              return 0;
            }
          },
        },
        rainbow: {
          run: (pattern: bg_pattern, fill: boolean = true): number => {
            const rainbow: HTMLElement | null = document.querySelector(
              '#BackGround>div[data-background-name="rainbow"]'
            );
            if (rainbow == null) {
              return 1;
            }
            rainbow.style.display = "contents";
            const canvas: HTMLCanvasElement | null = document.querySelector(
              '#BackGround>div[data-background-name="rainbow"]>canvas'
            );
            if (canvas == null) {
              return 2;
            }
            canvas.width = window.devicePixelRatio * window.innerWidth;
            canvas.height = window.devicePixelRatio * window.innerHeight;
            const ctx: CanvasRenderingContext2D | null =
              canvas.getContext("2d");
            if (ctx == null) {
              return 3;
            }
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            const theme_color: Function = () => {
              const rootElem: Element | null = document.querySelector(":root");
              if (rootElem == null) {
                return "";
              }
              const SelectStyle = getComputedStyle(rootElem);
              return String(
                SelectStyle.getPropertyValue("--back-color")
              ).trim();
            };
            ctx.fillStyle = theme_color();
            if (fill) {
              ctx.fillRect(0, 0, canvas.width, canvas.height);
            }
            const draw: Function = (): void => {
              for (
                let canvas_y = 0;
                (canvas_y - 1) * pattern.height < canvas.height;
                canvas_y++
              ) {
                for (
                  let canvas_x = 0;
                  (canvas_x - 1) * pattern.width +
                    pattern.shift[canvas_y % pattern.shift.length] <
                  canvas.width;
                  canvas_x++
                ) {
                  pattern.func(
                    ctx,
                    canvas_x * pattern.width +
                      pattern.shift[canvas_y % pattern.shift.length],
                    canvas_y * pattern.height
                  );
                }
              }
            };
            draw();
            return 0;
          },
          rectangle: (): void => {
            const size = 50;
            const pattern: bg_pattern = {
              width: size,
              height: size,
              shift: [0],
              func: (ctx: CanvasRenderingContext2D, x: number, y: number) => {
                ctx.globalCompositeOperation = "destination-out";
                ctx.lineWidth = 1;
                ctx.strokeRect(x, y, size, size);
                ctx.globalCompositeOperation = "source-over";
              },
            };
            bg_func.rainbow.run(pattern);
            setTimeout(bg_func.rainbow.rectangle, 100);
          },
          ichimatsu: (): void => {
            const size = 50;
            const pattern: bg_pattern = {
              width: size * 2,
              height: size,
              shift: [0, -size],
              func: (ctx: CanvasRenderingContext2D, x: number, y: number) => {
                ctx.globalAlpha = 0.8;
                ctx.fillRect(x, y, size, size);
                ctx.globalAlpha = 1;
                ctx.fillRect(x + size, y, size, size);
              },
            };
            bg_func.rainbow.run(pattern, false);
            setTimeout(bg_func.rainbow.ichimatsu, 100);
          },
          gingham_check: (): void => {
            const size = 30;
            const pattern: bg_pattern = {
              width: size * 2,
              height: size * 2,
              shift: [0],
              func: (ctx: CanvasRenderingContext2D, x: number, y: number) => {
                ctx.globalAlpha = 1;
                ctx.fillRect(x, y, size, size);
                ctx.globalAlpha = 0.9;
                ctx.fillRect(x + size, y, size, size);
                ctx.globalAlpha = 0.9;
                ctx.fillRect(x, y + size, size, size);
                ctx.globalAlpha = 0.8;
                ctx.fillRect(x + size, y + size, size, size);
              },
            };
            bg_func.rainbow.run(pattern, false);
            setTimeout(bg_func.rainbow.gingham_check, 100);
          },
          triangle: (): void => {
            const size = 25;
            const pattern: bg_pattern = {
              width: size * 2,
              height: Math.sqrt(3) * size,
              shift: [0, -size],
              func: (ctx: CanvasRenderingContext2D, x: number, y: number) => {
                const root3: number = Math.sqrt(3); //複数回使うので先に確保
                ctx.globalCompositeOperation = "destination-out";
                ctx.lineWidth = 1;
                ctx.beginPath();
                ctx.moveTo(x, y);
                ctx.lineTo(x + size * 2, y);
                ctx.lineTo(x + size, y + size * root3);
                ctx.closePath();
                ctx.stroke();
                ctx.beginPath();
                ctx.moveTo(x + size * 2, y);
                ctx.lineTo(x + size * 3, y + size * root3);
                ctx.lineTo(x + size, y + size * root3);
                ctx.closePath();
                ctx.stroke();
                ctx.globalCompositeOperation = "source-over";
              },
            };
            bg_func.rainbow.run(pattern);
            setTimeout(bg_func.rainbow.triangle, 100);
          },
          honeycomb: (): void => {
            const r: number = 25;
            const root3: number = Math.sqrt(3); //複数回使うので先に確保
            const honeycomb_width: number = r * root3;
            const honeycomb_height: number = (r * 3) / 2;
            const pattern: bg_pattern = {
              width: honeycomb_width,
              height: honeycomb_height,
              shift: [0, honeycomb_width / -2],
              func: (ctx: CanvasRenderingContext2D, x: number, y: number) => {
                ctx.globalCompositeOperation = "destination-out";
                ctx.lineWidth = 1;
                ctx.beginPath();
                ctx.moveTo(x, y - r);
                ctx.lineTo(x + (root3 / 2) * r, y - r / 2);
                ctx.lineTo(x + (root3 / 2) * r, y + r / 2);
                ctx.lineTo(x, y + r);
                ctx.lineTo(x - (root3 / 2) * r, y + r / 2);
                ctx.lineTo(x - (root3 / 2) * r, y - r / 2);
                ctx.closePath();
                ctx.stroke();
                ctx.globalCompositeOperation = "source-over";
              },
            };
            bg_func.rainbow.run(pattern);
            setTimeout(bg_func.rainbow.honeycomb, 100);
          },
          wave: () => {
            const wave_width = 250;
            const wave_r = 25;
            const pattern: bg_pattern = {
              width: wave_width,
              height: wave_r * 2,
              shift: [0],
              func: (ctx: CanvasRenderingContext2D, x: number, y: number) => {
                ctx.globalCompositeOperation = "destination-out";
                ctx.lineWidth = 1;
                ctx.beginPath();
                ctx.moveTo(x, y);
                for (let i = 0; i < wave_width; i++) {
                  ctx.lineTo(
                    x + i,
                    y + wave_r * Math.sin((2 * Math.PI * i) / wave_width)
                  );
                }
                ctx.lineTo(x + wave_width, y);
                ctx.stroke();
                ctx.globalCompositeOperation = "source-over";
              },
            };
            bg_func.rainbow.run(pattern);
            setTimeout(bg_func.rainbow.wave, 100);
          },
          halloween: () => {
            const width = 150;
            const height = width;
            const pattern: bg_pattern = {
              width: width,
              height: height,
              shift: [0, -width / 2],
              func: (ctx: CanvasRenderingContext2D, x: number, y: number) => {
                ctx.globalCompositeOperation = "destination-out";
                ctx.lineWidth = 1;
                ctx.beginPath();
                ctx.moveTo(x + width / 5, y + width / 5);
                ctx.lineTo(x + width / 10, y + (width / 5) * 2);
                ctx.lineTo(x + (width / 10) * 3, y + (width / 5) * 2);
                ctx.closePath();
                ctx.fill();
                ctx.beginPath();
                ctx.moveTo(x + (width / 5) * 4, y + width / 5);
                ctx.lineTo(x + (width / 10) * 9, y + (width / 5) * 2);
                ctx.lineTo(x + (width / 10) * 7, y + (width / 5) * 2);
                ctx.closePath();
                ctx.fill();
                ctx.beginPath();
                ctx.moveTo(x + width / 10, y + height / 2);
                ctx.lineTo(x + width / 5, y + (height / 10) * 7);
                ctx.lineTo(x + width / 3, y + (height / 3) * 2);
                ctx.lineTo(x + width / 2, y + (height / 10) * 8);
                ctx.lineTo(x + (width / 3) * 2, y + (height / 3) * 2);
                ctx.lineTo(x + (width / 5) * 4, y + (height / 10) * 7);
                ctx.lineTo(x + (width / 10) * 9, y + height / 2);
                ctx.lineTo(x + width / 2, y + (height / 5) * 3);
                ctx.closePath();
                ctx.fill();
                ctx.globalCompositeOperation = "source-over";
              },
            };
            bg_func.rainbow.run(pattern);
            setTimeout(bg_func.rainbow.halloween, 100);
          },
        },
      };
      const randInt: Function = (min: number, max: number): number =>
        Math.floor(Math.random() * (max + 1 - min)) + min;
      const bg_num: number = 13; //randInt(1, 13);
      switch (bg_num) {
        case 1:
          bg_func.monochrome();
          break;
        case 2:
          bg_func.rainbow.rectangle();
          break;
        case 3:
          bg_func.rainbow.triangle();
          break;
        case 4:
          bg_func.rainbow.honeycomb();
          break;
        case 5:
          bg_func.rainbow.ichimatsu();
          break;
        case 6:
          bg_func.gradient();
          break;
        case 7:
          bg_func.fluffycat();
          break;
        case 8:
          bg_func.rainbow.wave();
          break;
        case 9:
          bg_func.raindrop();
          break;
        case 10:
          bg_func.rainbow.gingham_check();
          break;
        case 11:
          bg_func.space();
          break;
        case 12:
          bg_func.rainbow.halloween();
          break;
        case 13:
          bg_func.wallpaper.infinite();
          break;
        default:
          console.error("Error bg_func out of Index");
          break;
      }
      return 0;
    };
    let color_theme: string = "auto";
    const color_theme_detector: Function = (): void => {
      const init_color_theme: Function = (): void => {
        const ls_color_theme: string | null =
          localStorage.getItem("color-theme");
        if (ls_color_theme == null) {
          color_theme = "auto";
          localStorage.setItem("color-theme", color_theme);
        } else {
          color_theme = ls_color_theme;
        }
        auto_color_theme();
        renew_color_theme();
      };
      const renew_color_theme = () => {
        localStorage.setItem("color-theme", color_theme);
        const change_button: HTMLElement | null = document.querySelector(
          "#change-color-theme"
        );
        if (change_button == null) {
          return;
        }
        const animate_selected: Function = () => {
          const speed = 2;
          const selected: HTMLElement | null = document.querySelector(
            "#color-theme-change-selected"
          );
          if (selected == null) {
            return;
          }
          let target_x: number = 250;
          switch (color_theme) {
            case "light":
              target_x = 50;
              selected.style.fill = "#eee";
              break;
            case "dark":
              target_x = 150;
              selected.style.fill = "#333";
              break;
            case "auto":
              target_x = 250;
              selected.style.fill = "#888";
              break;
            default:
              alert("error happend on change color theme");
              break;
          }
          const selected_cx: string = selected!.getAttribute("cx")!;
          const selected_inertia: string =
            selected!.getAttribute("data-inertia")!;
          const now_x: number = parseFloat(selected_cx);
          let next_x: number = now_x;
          if (
            Math.abs((target_x - now_x) / speed) <
            Math.abs(parseFloat(selected_inertia))
          ) {
            selected?.setAttribute(
              "data-inertia",
              ((target_x - now_x) / speed).toString()
            );
          } else {
            if (target_x > now_x) {
              selected?.setAttribute(
                "data-inertia",
                (parseFloat(selected_inertia) + 2).toString()
              );
            } else {
              selected?.setAttribute(
                "data-inertia",
                (parseFloat(selected_inertia) - 2).toString()
              );
            }
          }
          next_x += parseFloat(selected!.getAttribute("data-inertia")!);
          if (Math.abs(next_x - target_x) > 1) {
            selected?.setAttribute("cx", next_x.toString());
            requestAnimationFrame(() => {
              animate_selected();
            });
          } else {
            selected?.setAttribute("cx", target_x.toString());
          }
        };
        animate_selected();
        switch (color_theme) {
          case "light":
            document.documentElement.setAttribute("theme", "light");
            change_button.style.borderColor = "#000";
            break;
          case "dark":
            document.documentElement.setAttribute("theme", "dark");
            change_button.style.borderColor = "#fff";
            break;
          case "auto":
            change_button.style.borderColor = "#888";
            if (
              window.matchMedia("(prefers-color-scheme: dark)").matches == true
            ) {
              document.documentElement.setAttribute("theme", "dark");
            } else {
              document.documentElement.setAttribute("theme", "light");
            }
            break;
          default:
            alert("error happend on change color theme");
            break;
        }
      };
      const change_color_theme = (mode: string) => {
        color_theme = mode;
        renew_color_theme();
      };
      const auto_color_theme = () => {
        const mediaQuery = window.matchMedia("(prefers-color-scheme: dark)");
        mediaQuery.addEventListener("change", renew_color_theme);
      };
      init_color_theme();
      document
        .querySelector('#change-color-theme > svg > g[name="auto"]')
        ?.addEventListener("click", () => {
          change_color_theme("auto");
        });
      document
        .querySelector('#change-color-theme > svg > g[name="light"]')
        ?.addEventListener("click", () => {
          change_color_theme("light");
        });
      document
        .querySelector('#change-color-theme > svg > g[name="dark"]')
        ?.addEventListener("click", () => {
          change_color_theme("dark");
        });
    };
    select_bg();
    color_theme_detector();
  };
  client();
};
layout_main();
